"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateObservableUpDownCounter = exports.getOrCreateObservableCounter = exports.getOrCreateObservableGauge = exports.getOrCreateUpDownCounter = exports.getOrCreateCounter = exports.getOrCreateHistogram = exports.meterData = exports.MetricType = void 0;
const api_1 = require("@opentelemetry/api");
const opentelemetry_constants_1 = require("../opentelemetry.constants");
var MetricType;
(function (MetricType) {
    MetricType["Counter"] = "Counter";
    MetricType["UpDownCounter"] = "UpDownCounter";
    MetricType["Histogram"] = "Histogram";
    MetricType["ObservableGauge"] = "ObservableGauge";
    MetricType["ObservableCounter"] = "ObservableCounter";
    MetricType["ObservableUpDownCounter"] = "ObservableUpDownCounter";
})(MetricType || (exports.MetricType = MetricType = {}));
exports.meterData = new Map();
function getOrCreate(name, options = {}, type) {
    const nameWithPrefix = options.prefix ? `${options.prefix}.${name}` : name;
    let metric = exports.meterData.get(nameWithPrefix);
    if (metric === undefined) {
        const meter = api_1.metrics.getMeterProvider().getMeter(opentelemetry_constants_1.OTEL_METER_NAME);
        metric = meter[`create${type}`](nameWithPrefix, options);
        exports.meterData.set(nameWithPrefix, metric);
    }
    return metric;
}
function getOrCreateHistogram(name, options = {}) {
    return getOrCreate(name, options, MetricType.Histogram);
}
exports.getOrCreateHistogram = getOrCreateHistogram;
function getOrCreateCounter(name, options = {}) {
    return getOrCreate(name, options, MetricType.Counter);
}
exports.getOrCreateCounter = getOrCreateCounter;
function getOrCreateUpDownCounter(name, options = {}) {
    return getOrCreate(name, options, MetricType.UpDownCounter);
}
exports.getOrCreateUpDownCounter = getOrCreateUpDownCounter;
function getOrCreateObservableGauge(name, options = {}) {
    return getOrCreate(name, options, MetricType.ObservableGauge);
}
exports.getOrCreateObservableGauge = getOrCreateObservableGauge;
function getOrCreateObservableCounter(name, options = {}) {
    return getOrCreate(name, options, MetricType.ObservableCounter);
}
exports.getOrCreateObservableCounter = getOrCreateObservableCounter;
function getOrCreateObservableUpDownCounter(name, options = {}) {
    return getOrCreate(name, options, MetricType.ObservableUpDownCounter);
}
exports.getOrCreateObservableUpDownCounter = getOrCreateObservableUpDownCounter;
