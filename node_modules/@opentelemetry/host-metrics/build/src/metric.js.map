{"version":3,"file":"metric.js","sourceRoot":"","sources":["../../src/metric.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseMetrics } from './BaseMetrics';\nimport {\n  BatchObservableResult,\n  ObservableCounter,\n  ObservableGauge,\n} from '@opentelemetry/api';\nimport {\n  ATTRIBUTE_NAMES,\n  CPU_LABELS,\n  MEMORY_LABELS,\n  METRIC_NAMES,\n  NETWORK_LABELS,\n} from './enum';\n\nimport {\n  getCpuUsageData,\n  getMemoryData,\n  getProcessCpuUsageData,\n  getProcessMemoryData,\n} from './stats/common';\nimport { getNetworkData } from './stats/si';\nimport type { CpuUsageData, MemoryData, ProcessCpuUsageData } from './types';\nimport type { Systeminformation } from 'systeminformation';\n\n/**\n * Metrics Collector - collects metrics for CPU, Memory, Network\n */\nexport class HostMetrics extends BaseMetrics {\n  private _batchUpdateCpuUsages(\n    observableResult: BatchObservableResult,\n    cpuUsages: CpuUsageData[]\n  ): void {\n    const stateAttr = ATTRIBUTE_NAMES.SYSTEM_CPU_STATE;\n    const cpuAttr = ATTRIBUTE_NAMES.SYSTEM_CPU_LOGICAL_NUMBER;\n\n    for (let i = 0, j = cpuUsages.length; i < j; i++) {\n      const cpuUsage = cpuUsages[i];\n      observableResult.observe(this._cpuTime, cpuUsage.user, {\n        [stateAttr]: CPU_LABELS.USER,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuTime, cpuUsage.system, {\n        [stateAttr]: CPU_LABELS.SYSTEM,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuTime, cpuUsage.idle, {\n        [stateAttr]: CPU_LABELS.IDLE,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuTime, cpuUsage.interrupt, {\n        [stateAttr]: CPU_LABELS.INTERRUPT,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuTime, cpuUsage.nice, {\n        [stateAttr]: CPU_LABELS.NICE,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n\n      observableResult.observe(this._cpuUtilization, cpuUsage.userP, {\n        [stateAttr]: CPU_LABELS.USER,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuUtilization, cpuUsage.systemP, {\n        [stateAttr]: CPU_LABELS.SYSTEM,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuUtilization, cpuUsage.idleP, {\n        [stateAttr]: CPU_LABELS.IDLE,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuUtilization, cpuUsage.interruptP, {\n        [stateAttr]: CPU_LABELS.INTERRUPT,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n      observableResult.observe(this._cpuUtilization, cpuUsage.niceP, {\n        [stateAttr]: CPU_LABELS.NICE,\n        [cpuAttr]: cpuUsage.cpuNumber,\n      });\n    }\n  }\n\n  private _batchUpdateProcessCpuUsages(\n    observableResult: BatchObservableResult,\n    processCpuUsage: ProcessCpuUsageData\n  ): void {\n    const stateAttr = ATTRIBUTE_NAMES.PROCESS_CPU_STATE;\n\n    observableResult.observe(this._processCpuTime, processCpuUsage.user, {\n      [stateAttr]: CPU_LABELS.USER,\n    });\n    observableResult.observe(this._processCpuTime, processCpuUsage.system, {\n      [stateAttr]: CPU_LABELS.SYSTEM,\n    });\n\n    observableResult.observe(\n      this._processCpuUtilization,\n      processCpuUsage.userP,\n      {\n        [stateAttr]: CPU_LABELS.USER,\n      }\n    );\n    observableResult.observe(\n      this._processCpuUtilization,\n      processCpuUsage.systemP,\n      {\n        [stateAttr]: CPU_LABELS.SYSTEM,\n      }\n    );\n  }\n\n  private _batchUpdateMemUsages(\n    observableResult: BatchObservableResult,\n    memUsage: MemoryData\n  ): void {\n    const stateAttr = ATTRIBUTE_NAMES.SYSTEM_MEMORY_STATE;\n\n    observableResult.observe(this._memoryUsage, memUsage.used, {\n      [stateAttr]: MEMORY_LABELS.USED,\n    });\n    observableResult.observe(this._memoryUsage, memUsage.free, {\n      [stateAttr]: MEMORY_LABELS.FREE,\n    });\n\n    observableResult.observe(this._memoryUtilization, memUsage.usedP, {\n      [stateAttr]: MEMORY_LABELS.USED,\n    });\n    observableResult.observe(this._memoryUtilization, memUsage.freeP, {\n      [stateAttr]: MEMORY_LABELS.FREE,\n    });\n  }\n\n  private _batchUpdateProcessMemUsage(\n    observableResult: BatchObservableResult,\n    memoryUsage: number\n  ): void {\n    observableResult.observe(this._processMemoryUsage, memoryUsage);\n  }\n\n  private _batchUpdateNetworkData(\n    observableResult: BatchObservableResult,\n    networkUsages: Systeminformation.NetworkStatsData[]\n  ): void {\n    const deviceAttr = ATTRIBUTE_NAMES.SYSTEM_DEVICE;\n    const directionAttr = ATTRIBUTE_NAMES.NETWORK_IO_DIRECTION;\n\n    for (let i = 0, j = networkUsages.length; i < j; i++) {\n      const networkUsage = networkUsages[i];\n      observableResult.observe(this._networkDropped, networkUsage.rx_dropped, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.RECEIVE,\n      });\n      observableResult.observe(this._networkDropped, networkUsage.tx_dropped, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.TRANSMIT,\n      });\n\n      observableResult.observe(this._networkErrors, networkUsage.rx_errors, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.RECEIVE,\n      });\n      observableResult.observe(this._networkErrors, networkUsage.tx_errors, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.TRANSMIT,\n      });\n\n      observableResult.observe(this._networkIo, networkUsage.rx_bytes, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.RECEIVE,\n      });\n      observableResult.observe(this._networkIo, networkUsage.tx_bytes, {\n        [deviceAttr]: networkUsage.iface,\n        [directionAttr]: NETWORK_LABELS.TRANSMIT,\n      });\n    }\n  }\n\n  /**\n   * Creates metrics\n   */\n  protected _createMetrics(): void {\n    this._cpuTime = this._meter.createObservableCounter(METRIC_NAMES.CPU_TIME, {\n      description: 'Cpu time in seconds',\n      unit: 's',\n    });\n    this._cpuUtilization = this._meter.createObservableGauge(\n      METRIC_NAMES.CPU_UTILIZATION,\n      {\n        description: 'Cpu usage time 0-1',\n      }\n    );\n\n    this._memoryUsage = this._meter.createObservableGauge(\n      METRIC_NAMES.MEMORY_USAGE,\n      {\n        description: 'Memory usage in bytes',\n      }\n    );\n    this._memoryUtilization = this._meter.createObservableGauge(\n      METRIC_NAMES.MEMORY_UTILIZATION,\n      {\n        description: 'Memory usage 0-1',\n      }\n    );\n\n    this._networkDropped = this._meter.createObservableCounter(\n      METRIC_NAMES.NETWORK_DROPPED,\n      {\n        description: 'Network dropped packets',\n      }\n    );\n    this._networkErrors = this._meter.createObservableCounter(\n      METRIC_NAMES.NETWORK_ERRORS,\n      {\n        description: 'Network errors counter',\n      }\n    );\n    this._networkIo = this._meter.createObservableCounter(\n      METRIC_NAMES.NETWORK_IO,\n      {\n        description: 'Network transmit and received bytes',\n      }\n    );\n\n    this._processCpuTime = this._meter.createObservableCounter(\n      METRIC_NAMES.PROCESS_CPU_TIME,\n      {\n        description: 'Process Cpu time in seconds',\n        unit: 's',\n      }\n    );\n    this._processCpuUtilization = this._meter.createObservableGauge(\n      METRIC_NAMES.PROCESS_CPU_UTILIZATION,\n      {\n        description: 'Process Cpu usage time 0-1',\n      }\n    );\n    this._processMemoryUsage = this._meter.createObservableGauge(\n      METRIC_NAMES.PROCESS_MEMORY_USAGE,\n      {\n        description: 'Process Memory usage in bytes',\n      }\n    );\n\n    this._meter.addBatchObservableCallback(\n      async observableResult => {\n        const cpuUsages = getCpuUsageData();\n        const memoryUsages = getMemoryData();\n        const processCpuUsages = getProcessCpuUsageData();\n        const processMemoryUsages = getProcessMemoryData();\n        const networkData = await getNetworkData();\n\n        this._batchUpdateCpuUsages(observableResult, cpuUsages);\n        this._batchUpdateMemUsages(observableResult, memoryUsages);\n        this._batchUpdateProcessCpuUsages(observableResult, processCpuUsages);\n        this._batchUpdateProcessMemUsage(observableResult, processMemoryUsages);\n        this._batchUpdateNetworkData(observableResult, networkData);\n      },\n      [\n        this._cpuTime,\n        this._cpuUtilization,\n        this._memoryUsage,\n        this._memoryUtilization,\n        this._processCpuTime,\n        this._processCpuUtilization,\n        this._processMemoryUsage,\n        this._networkDropped,\n        this._networkErrors,\n        this._networkIo,\n      ]\n    );\n  }\n\n  /**\n   * Starts collecting metrics\n   */\n  start() {\n    this._createMetrics();\n  }\n\n  // The metrics are created in `_createMetrics`.\n  private _cpuTime!: ObservableCounter;\n  private _cpuUtilization!: ObservableGauge;\n  private _memoryUsage!: ObservableGauge;\n  private _memoryUtilization!: ObservableGauge;\n  private _processCpuTime!: ObservableCounter;\n  private _processCpuUtilization!: ObservableGauge;\n  private _processMemoryUsage!: ObservableGauge;\n  private _networkDropped!: ObservableCounter;\n  private _networkErrors!: ObservableCounter;\n  private _networkIo!: ObservableCounter;\n}\n"]}